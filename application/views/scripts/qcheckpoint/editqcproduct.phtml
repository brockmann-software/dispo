<script>
function buildNewRow(row)
{
	QC = new Object();
	QC.No = 'new';
	QC.qck_no = 0;
	QC.qc_type = '';
	QC.checkpoint_class = '';
	QC.max_verygood = 0;
	QC.max_good = 0;
	QC.max_ok = 0;
	QC.max_regular = 0;
	QC.max_almostregular = 0;
	QC.operator_name = '';
	buildRow(row, QC);
}

function buildRow(row, QC)
{
	row.id = QC.No;
	var cell0 = row.insertCell(0);
	if (row.id=='new') {
		cell0.innerHTML ='';
	} else {
		cell0.innerHTML ='<a onclick="deleteQC(this)"><img src="/images/b_drop.png" alt="löschen" title="löschen" /></a>';
	}
	var cell1 = row.insertCell(1);
	cell1.className="data";
	var qcSelect = document.getElementById('quality_checkpoints').cloneNode(true);
	qcSelect.name = QC.No+'_qc';
	qcSelect.id = QC.No+'_qc';
	qcSelect.value = QC.qck_no;
	cell1.appendChild(qcSelect);
	var cell2 = row.insertCell(2);
	cell2.id = QC.No+'_qc_type';
	cell2.className = 'data';
	cell2.innerHTML = QC.qc_type;
	var cell3 = row.insertCell(3);
	cell3.id = QC.No+'_qc_class';
	cell3.className = 'data';
	cell3.innerHTML = QC.checkpoint_class;
	var cell4 = row.insertCell(4);
	var inputMaxVeryGood = document.createElement('input');
	inputMaxVeryGood.name = QC.No+'_max_verygood';
	inputMaxVeryGood.id = QC.No+'_max_verygood';
	inputMaxVeryGood.type = 'number';
	inputMaxVeryGood.min = '0';
	inputMaxVeryGood.max = '100';
	inputMaxVeryGood.step = '0.1';
	inputMaxVeryGood.value = QC.max_verygood;
	inputMaxVeryGood.onchange = function() { insertQC(this); };
	cell4.className = 'data';
	cell4.appendChild(inputMaxVeryGood);
	var cell5 = row.insertCell(5);
	var inputMaxGood = document.createElement('input');
	inputMaxGood.name = QC.No+'_max_good';
	inputMaxGood.id = QC.No+'_max_good';
	inputMaxGood.type = 'number';
	inputMaxGood.min = '0';
	inputMaxGood.max = '100';
	inputMaxGood.step = '0.1';
	inputMaxGood.value = QC.max_good;
	inputMaxGood.onchange = function() { insertQC(this); };
	cell5.className = 'data';
	cell5.appendChild(inputMaxGood);
	var cell6 = row.insertCell(6);
	var inputMaxOk = document.createElement('input');
	inputMaxOk.name = QC.No+'_max_ok';
	inputMaxOk.id = QC.No+'_max_ok';
	inputMaxOk.type = 'number';
	inputMaxOk.min = '0';
	inputMaxOk.max = '100';
	inputMaxOk.step = '0.1';
	inputMaxOk.value = QC.max_ok;
	inputMaxOk.onchange = function() { insertQC(this); };
	cell6.className = 'data';
	cell6.appendChild(inputMaxOk);
	var cell7 = row.insertCell(7);
	var inputMaxRegular = document.createElement('input');
	inputMaxRegular.name = QC.No+'_max_regular';
	inputMaxRegular.id = QC.No+'_max_regular';
	inputMaxRegular.type = 'number';
	inputMaxRegular.min = '0';
	inputMaxRegular.max = '100';
	inputMaxRegular.step = '0.1';
	inputMaxRegular.value = QC.max_regular;
	inputMaxRegular.onchange = function() { insertQC(this); };
	cell7.className = 'data';
	cell7.appendChild(inputMaxRegular);
	var cell8 = row.insertCell(8);
	var inputMaxAlmostRegular = document.createElement('input');
	inputMaxAlmostRegular.name = QC.No+'_max_almostregular';
	inputMaxAlmostRegular.id = QC.No+'_max_almostregular';
	inputMaxAlmostRegular.type = 'number';
	inputMaxAlmostRegular.min = '0';
	inputMaxAlmostRegular.max = '100';
	inputMaxAlmostRegular.step = '0.1';
	inputMaxAlmostRegular.value = QC.max_almostregular;
	inputMaxAlmostRegular.onchange = function() { insertQC(this); };
	cell8.className = 'data';
	cell8.appendChild(inputMaxAlmostRegular);
	var cell9 = row.insertCell(9);
	cell9.className = 'data';
	cell9.id = QC.No+'_operator';
	cell9.innerHTML = QC.operator_name;
}

function loadQuality_Checkpoints(product)
{
	function loadQCXML()
	{
		if (http.readyState == 4) {
			qcProductTable = document.getElementById('qc_products').getElementsByTagName('tbody')[0];
			while (qcProductTable.rows.length>0) qcProductTable.deleteRow(0); 
			if (http.responseXML) {
				errorCount = getXMLTagValue(http.responseXML, 'errorCount') || 0;
				if (errorCount==0) {
					qcProducts = http.responseXML.getElementsByTagName('result');
					for (qc=0; qc<qcProducts.length; qc++) {
						qcProduct = [];
						qcProduct['No'] = getXMLTagValue(qcProducts[qc], 'No');
						qcProduct['product_group'] = getXMLTagValue(qcProducts[qc], 'product_group') || 0;
						qcProduct['unece_link'] = getXMLTagValue(qcProducts[qc], 'unece_link') || '';
						qcProduct['qck_no'] = getXMLTagValue(qcProducts[qc], 'qck_no') || 0;
						qcProduct['type'] = getXMLTagValue(qcProducts[qc], 'type') || 0;
						qcProduct['qc_type'] = getXMLTagValue(qcProducts[qc], 'qc_type') || '';
						qcProduct['qchk_class_no'] = getXMLTagValue(qcProducts[qc], 'qchk_class_no') || 0;
						qcProduct['checkpoint_class'] = getXMLTagValue(qcProducts[qc], 'checkpoint_class') || '';
						qcProduct['quality_checkpoint'] = getXMLTagValue(qcProducts[qc], 'quality_checkpoint') || 0;
						qcProduct['max_good'] = getXMLTagValue(qcProducts[qc], 'max_good') || 0;
						qcProduct['max_regular'] = getXMLTagValue(qcProducts[qc], 'max_regular') || 0;
						qcProduct['max_verygood'] = getXMLTagValue(qcProducts[qc], 'max_verygood') || 0;
						qcProduct['max_ok'] = getXMLTagValue(qcProducts[qc], 'max_ok') || 0;
						qcProduct['max_almostregular'] = getXMLTagValue(qcProducts[qc], 'max_almostregular') || 0;
						qcProduct['operator'] = getXMLTagValue(qcProducts[qc], 'operator') || 0;
						qcProduct['operator_name'] = getXMLTagValue(qcProducts[qc], 'operator_name') || '';
						row = qcProductTable.insertRow(qc);
						buildRow(row, qcProduct);
					}
					row = qcProductTable.insertRow(qcProductTable.rows.length);
					buildNewRow(row);
				} else {
					var errTxt = '';
					errors = http.responseXML.getElementsByTagName('error');
					for (ec = 0; ec<errors.length; ec++) {
						errTxt+=getXMLTagValue(errors[ec], 'error_field')+' ';
						errTxt+=getXMLTagValue(errors[ec], 'error_text')+'\n';
					}
					alert(errTxt);
				}
			} else {
				alert(http.responseText);
			}
		}
	}
	
		
	var uri = '/qcheckpoint/getqcproduct/product/'+product;
	createRequest();
	sendRequest('GET', uri, '', loadQCXML, false);
}
	
function insertQC(element)
{
	function insertQCXML()
	{
		if (http.readyState == 4) {
			if (http.responseXML) {
				errorCount = getXMLTagValue(http.responseXML, 'errorCount') || 0;
				if (errorCount==0) {
					qc.value = getXMLTagValue(http.responseXML, 'qck_no') || 0;
					qc_type.innerHTML = getXMLTagValue(http.responseXML, 'qc_type') || '';
					qc_class.innerHTML = getXMLTagValue(http.responseXML, 'checkpoint_class') || '';
					max_good.value = getXMLTagValue(http.responseXML, 'max_good') || 0;
					max_regular.value = getXMLTagValue(http.responseXML, 'max_regular') || 0;
					operator.innerHTML = getXMLTagValue(http.responseXML, 'operator_name') || '';
					if (row.id=='new') {
						row.cells[0].innerHTML ='<a onclick="deleteQC(this)"><img src="/images/b_drop.png" alt="löschen" title="löschen" /></a>';
						newNo = getXMLTagValue(http.responseXML, 'No') || 'new';
						row.id = newNo;
						qc.id = newNo+'_qc';
						qc.name = newNo+'_qc';
						qc_type.id = newNo+'_qc_type';
						qc_class.id = newNo+'_qc_class';
						max_good.id = newNo+'_max_good';
						max_good.name = newNo+'_max_good';
						max_regular.id = newNo+'_max_regular';
						max_regular.name = newNo+'_max_regular';
						max_verygood.name = newNo+'_max_verygood';
						max_verygood.id = newNo+'_max_verygood';
						max_ok.name = newNo+'_max_ok';
						max_ok.id = newNo+'_max_ok';
						max_almostregular.name = newNo+'_max_almostregular';
						max_regular.id = newNo+'_max_almostregular';
						operator.id = newNo+'_operator';
						qcProductTable = document.getElementById('qc_products').getElementsByTagName('tbody')[0];
						newRow = qcProductTable.insertRow(qcProductTable.rows.length)
						buildNewRow(newRow);
					}
				} else {
					var errTxt = '';
					errors = http.responseXML.getElementsByTagName('error');
					for (ec = 0; ec<errors.length; ec++) {
						errTxt+=getXMLTagValue(errors[ec], 'error_field')+' ';
						errTxt+=getXMLTagValue(errors[ec], 'error_text')+'\n';
					}
					alert(errTxt);
				}
			} else {
				alert(http.responseText);
			}
		}
	}

	var row = element.parentNode.parentNode;
	var No = row.id;
	var qc = document.getElementById(row.id+'_qc');
	var product = document.getElementById('qc_product');
	var qc_type = document.getElementById(row.id+'_qc_type');
	var qc_class = document.getElementById(row.id+'_qc_class');
	var max_good = document.getElementById(row.id+'_max_good');
	var max_regular = document.getElementById(row.id+'_max_regular');
	var max_verygood = document.getElementById(row.id+'_max_verygood');
	var max_ok = document.getElementById(row.id+'_max_ok');
	var max_almostregular = document.getElementById(row.id+'_max_almostregular');
	var operator = document.getElementById(row.id+'_operator');
	var params = 'No='+row.id+'&product='+product.value+'&quality_checkpoint='+qc.value+'&max_good='+max_good.value+'&max_regular='+max_regular.value+'&max_verygood='+max_verygood.value+'&max_ok='+max_ok.value+'&max_almostregular='+max_almostregular.value;
	var uri = '/qcheckpoint/updateqcproduct/';
	upload = true;
	if (No=='new') {
		upload = confirm('Neuer Prüfpunkt für Artikel wird hinzugefügt.');
	}
	if (upload) {
		createRequest();
		sendRequest('POST', uri, params, insertQCXML, false);
	}
}
function deleteQC(element)
{
	function deleteQCXML()
	{
		if (http.readyState == 4) {
			if (http.responseXML) {
				errorCount = getXMLTagValue(http.responseXML, 'errorCount') || 0;
				if (errorCount==0) {
					qcProductTable = document.getElementById('qc_products').getElementsByTagName('tbody')[0];
					qcProductTable.deleteRow(row.sectionRowIndex);
				} else {
					var errTxt = '';
					errors = http.responseXML.getElementsByTagName('error');
					for (ec = 0; ec<errors.length; ec++) {
						errTxt+=getXMLTagValue(errors[ec], 'error_field')+' ';
						errTxt+=getXMLTagValue(errors[ec], 'error_text')+'\n';
					}
					alert(errTxt);
				}
			} else {
				alert(http.responseText);
			}
		}
	}
	var row = element.parentNode.parentNode;
	var No = row.id;
	uri = '/qcheckpoint/deleteqcheckpoint/'
	params = 'No='+No+'&delete=DELETE';
	if (confirm('Prüfpunkt wird gelöscht!')) {
		createRequest();
		sendRequest('POST', uri, params, deleteQCXML, false);
	}
}

function setAllGeneral()
{
	uri = '/qcheckpoint/setallgeneralforproduct/product/'+document.getElementById('qc_product').value;
	window.location = uri;
}
</script>
<div class="data_container">
<select name="quality_checkpoints" id="quality_checkpoints" onchange="insertQC(this)">
<?php foreach ($this->params['quality_checkpoints'] as $quality_checkpoint) : ?>
<option value="<?php echo $quality_checkpoint['No']; ?>"><?php echo $quality_checkpoint['quality_checkpoint']; ?></option>
<?php endforeach ?>
</select>
</div>
<?php // Zend_Debug::dump($this->qc_product); ?>
<button type="button" onclick="setAllGeneral()">Standard-kontrollpunkte laden</button>
<div>
<table>
<tr>
	<td width="100px">Product</td><td><select name="qc_product" id="qc_product" onchange="loadQuality_Checkpoints(this.value)">
									<?php foreach ($this->params['products'] as $product) : ?>
									<option value="<?php echo $product['No']; ?>"<?php if ($product['No']==$this->qc_product['No']) echo " selected"; ?>><?php echo $product['product']; ?></option>
									<?php endforeach ?>
									</select></td>
</tr>
</table>
<div>
<table id="qc_products">
<thead>
<tr>
	<th></th>
	<th class="data">Prüfpunkt</th>
	<th class="data">Art</th>
	<th class="data">Klasse</th>
	<th class="data">Max sehrgut</th>
	<th class="data">Max gut</th>
	<th class="data">Max befr.</th>
	<th class="data">Max ausr.</th>
	<th class="data">Max mangelh.</th>
	<th class="data">Operator</th>
</tr>
</thead>
<tbody>
<?php foreach($this->data as $data) : ?>
<tr id="<?php echo $data['No']; ?>">
	<td><a onclick="deleteQC(this)"><img src="/images/b_drop.png" alt="löschen" title="löschen" /></a></td>
	<td class="data"><select name="<?php echo $data['No']; ?>_qc" id="<?php echo $data['No']; ?>_qc" onchange="insertQC(this)">
					<?php foreach ($this->params['quality_checkpoints'] as $quality_checkpoint) : ?>
					<option value="<?php echo $quality_checkpoint['No']; ?>"<?php if ($quality_checkpoint['No']==$data['qck_no']) echo " selected"; ?>><?php echo $quality_checkpoint['quality_checkpoint']; ?></option>
					<?php endforeach ?>
					</select></td>
	<td class="data" id="<?php echo $data['No']; ?>_qc_type"><?php echo $data['qc_type']; ?></td>
	<td class="data" id="<?php echo $data['No']; ?>_qc_class"><?php echo $data['checkpoint_class']; ?></td>
	<td class="data" id="<?php echo $data['No']; ?>_qc_max_verygood"><?php echo $this->formNumber($data['No'].'_max_verygood', $data['max_verygood'], array('id'=>$data['No'].'_max_verygood', 'min'=>'0', 'max'=>'100', 'step'=>'0.1', 'onchange'=>'insertQC(this)')); ?></td>
	<td class="data"><input type="number" name="<?php echo $data['No']; ?>_max_good" id="<?php echo $data['No']; ?>_max_good" min="0" max="100" step="0.1" value="<?php echo $data['max_good']; ?>" onchange="insertQC(this)" /></td>
	<td class="data" id="<?php echo $data['No']; ?>_qc_max_ok"><?php echo $this->formNumber($data['No'].'_max_ok', $data['max_ok'], array('id'=>$data['No'].'_max_ok', 'min'=>'0', 'max'=>'100', 'step'=>'0.1', 'onchange'=>'insertQC(this)')); ?></td>
	<td class="data"><input type="number" name="<?php echo $data['No']; ?>_max_regular" id="<?php echo $data['No']; ?>_max_regular" min="0" max="100" step="0.1" value="<?php echo $data['max_regular']; ?>" onchange="insertQC(this)" /></td>
	<td class="data" id="<?php echo $data['No']; ?>_qc_max_almostregular"><?php echo $this->formNumber($data['No'].'_max_almostregular', $data['max_almostregular'], array('id'=>$data['No'].'_max_almostregular', 'min'=>'0', 'max'=>'100', 'step'=>'0.1', 'onchange'=>'insertQC(this)')); ?></td>
	<td class="data" id="<?php echo $data['No']; ?>_operator"><?php echo $data['operator_name']; ?></td>
</tr>
<?php endforeach ?>
<tr id="new">
	<td></td>
	<td class="data"><select name="new_qc" id="new_qc" onchange="insertQC(this)">
					<?php foreach ($this->params['quality_checkpoints'] as $quality_checkpoint) : ?>
					<option value="<?php echo $quality_checkpoint['No']; ?>"><?php echo $quality_checkpoint['quality_checkpoint']; ?></option>
					<?php endforeach ?>
					</select></td>
	<td class="data" id="new_qc_type"></td>
	<td class="data" id="new_qc_class"></td>
	<td class="data"><input type="number" name="new_max_verygood" id="new_max_maxverygood" min="0" max="100" step="0.1" onchange="insertQC(this)"/></td>
	<td class="data"><input type="number" name="new_max_good" id="new_max_good" min="0" max="100" step="0.1" onchange="insertQC(this)"/></td>
	<td class="data"><input type="number" name="new_max_ok" id="new_max_ok" min="0" max="100" step="0.1" onchange="insertQC(this)"/></td>
	<td class="data"><input type="number" name="new_max_regular" id="new_max_regular" min="0" max="100" step="0.1" onchange="insertQC(this)" /></td>
	<td class="data"><input type="number" name="new_max_almostregular" id="new_max_almostregular" min="0" max="100" step="0.1" onchange="insertQC(this)"/></td>
	<td class="data" id="new_operator"></td>
</tr>
</tbody>
</table>
</div>